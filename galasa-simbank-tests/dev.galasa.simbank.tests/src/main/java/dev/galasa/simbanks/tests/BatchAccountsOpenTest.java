/*
 * Licensed Materials - Property of IBM
 * 
 * (c) Copyright IBM Corp. 2019.
 */
package dev.galasa.simbanks.tests;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.assertj.core.api.Fail;

import dev.galasa.Test;
import dev.galasa.artifact.ArtifactManager;
import dev.galasa.artifact.IArtifactManager;
import dev.galasa.artifact.IBundleResources;
import dev.galasa.artifact.TestBundleResourceException;
import dev.galasa.core.manager.Logger;
import dev.galasa.zos.IZosImage;
import dev.galasa.zos.ZosImage;
import dev.galasa.zosbatch.IZosBatch;
import dev.galasa.zosbatch.IZosBatchJob;
import dev.galasa.zosbatch.IZosBatchJobname;
import dev.galasa.zosbatch.ZosBatch;
import dev.galasa.zosbatch.ZosBatchException;
import dev.galasa.zosbatch.ZosBatchJobname;

@Test
public class BatchAccountsOpenTest {

    @ZosImage(imageTag = "simbank")
    public IZosImage        image;
    
    @ZosBatch(imageTag="simbank")
    public IZosBatch zosBatch;
    
    @ZosBatchJobname(imageTag="simbank")
    public IZosBatchJobname zosBatchJobname;

    @ArtifactManager
    public IArtifactManager artifacts;
    
    @Logger
    public Log              logger;

    /**
     * Test which uses the SIMBANK batch job to open a number of new accounts.
     * The test passes if the job completes successfully (RC=0000)
     * @throws TestBundleResourceException 
     * @throws IOException 
     * @throws ZosBatchException
     */
    @Test
    public void batchOpenAccountsTest() throws TestBundleResourceException, IOException, ZosBatchException {
    	// Create a list of accounts to create
    	List<String> accountList = new LinkedList<>();
    	accountList.add("901000001,20-40-60,1000");
    	accountList.add("901000002,20-40-60,1000");
    	accountList.add("901000003,20-40-60,1000");
    	accountList.add("901000004,20-40-60,1000");
    	accountList.add("901000005,20-40-60,1000");
    	accountList.add("901000006,20-40-60,1000");
    	accountList.add("901000007,20-40-60,1000");
    	accountList.add("901000008,20-40-60,1000");
    	accountList.add("901000009,20-40-60,1000");

    	// Create the substitution parameters for the JCL
    	HashMap<String, Object> parameters = new HashMap<>();
        parameters.put("CONTROL", "ACCOUNT_OPEN");
        parameters.put("DATAIN", String.join("\n", accountList));
    	
	    // Load the JCL with the given substitution parameters
	    IBundleResources resources = artifacts.getBundleResources(this.getClass());
	    InputStream inputStream = resources.retrieveSkeletonFile("/resources/skeletons/SIMBANK.jcl", parameters);
		String jcl = resources.streamAsString(inputStream);
		
		// Submit the JCL
		IZosBatchJob batchJob = zosBatch.submitJob(jcl, zosBatchJobname);
		
		// Wait for the batch job to complete
		logger.info("batchJob.toString() = " +  batchJob.toString());
		int rc = batchJob.waitForJob();
		
		// If highest CC was not 0, fail the test
		if (rc != 0) {
			// Print the job output to the run log
			batchJob.retrieveOutput().forEach(jobOutput ->
				logger.info("batchJob.retrieveOutput(): " + jobOutput.getDdname() + "\n" + jobOutput.getRecords() + "\n")
			);
			Fail.fail("Batch job failed RETCODE=" + batchJob.getRetcode() + " Check batch job output");
			
		}
		logger.info("Batch job complete RETCODE=" + batchJob.getRetcode());
    }
}
